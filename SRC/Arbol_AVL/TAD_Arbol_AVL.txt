TAD NodoBinarioAVL

Datos:

    dato: Elemento de tipo T almacenado en el nodo.

    hijoIzq: Puntero al hijo izquierdo del nodo.

    hijoDer: Puntero al hijo derecho del nodo.

Operaciones:

    NodoBinarioAVL(): Constructor del nodo.

    ~NodoBinarioAVL(): Destructor del nodo.

    getDato(): Retorna el dato almacenado.

    setDato(T& val): Asigna un valor al dato.

    getHijoIzq(): Retorna el puntero al hijo izquierdo.

    getHijoDer(): Retorna el puntero al hijo derecho.

    setHijoIzq(NodoBinarioAVL<T>* izq): Asigna un hijo izquierdo.

    setHijoDer(NodoBinarioAVL<T>* der): Asigna un hijo derecho.

TAD ArbolBinarioAVL

Datos:

    raiz: Puntero a la raíz del árbol.

Operaciones:

    ArbolBinarioAVL(): Constructor del árbol.

    ~ArbolBinarioAVL(): Destructor del árbol.

    setRaiz(NodoBinarioAVL<T>* raiz): Asigna la raíz del árbol.

    getRaiz(): Retorna la raíz del árbol.

    esVacio(): Verifica si el árbol está vacío.

    datoRaiz(): Retorna el dato de la raíz.

    altura(NodoBinarioAVL<T> *inicio): Calcula la altura del árbol desde un nodo dado.

    tamano(NodoBinarioAVL<T> *inicio): Calcula el número de nodos en el árbol desde un nodo dado.

    giroDerecha(NodoBinarioAVL<T>*& inicio): Realiza una rotación simple a la derecha.

    giroIzquierdaDerecha(NodoBinarioAVL<T>* &padre): Realiza una rotación doble izquierda-derecha.

    giroIzquierda(NodoBinarioAVL<T>*& inicio): Realiza una rotación simple a la izquierda.

    giroDerechaIzquierda(NodoBinarioAVL<T>* &padre): Realiza una rotación doble derecha-izquierda.

    insertar(T& val): Inserta un valor en el árbol.

    eliminar(T& val): Elimina un valor del árbol.

    buscar(T& val): Busca un valor en el árbol.

    preOrden(NodoBinarioAVL<T> *inicio): Recorre el árbol en preorden.

    inOrden(NodoBinarioAVL<T> *inicio): Recorre el árbol en inorden.

    posOrden(NodoBinarioAVL<T> *inicio): Recorre el árbol en posorden.

    nivelOrden(NodoBinarioAVL<T> *inicio): Recorre el árbol por niveles.
