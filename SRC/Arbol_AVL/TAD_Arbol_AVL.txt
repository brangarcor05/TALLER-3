TAD Nodo
Datos

    clave: Número entero que representa la clave del nodo.

    izquierda: Puntero al hijo izquierdo del nodo.

    derecha: Puntero al hijo derecho del nodo.

    altura: Entero que indica la altura del nodo en el árbol.

Operaciones

    Nodo(int clave): Constructor que inicializa un nodo con la clave dada, sin hijos y con altura 1.

TAD Árbol AVL
Datos

    raiz: Puntero al nodo raíz del árbol.

Operaciones

    ArbolAVL(): Constructor que inicializa el árbol vacío.

    insertar(int clave): Inserta una clave en el árbol manteniendo el balance.

    eliminar(int clave): Elimina un nodo con la clave dada y ajusta el balance.

    buscar(int clave) -> bool: Retorna true si la clave está en el árbol, false en caso contrario.

    recorridoInorden(): Imprime los elementos en orden ascendente.

    recorridoPreorden(): Imprime los elementos en el orden raíz-izquierda-derecha.

    recorridoPostorden(): Imprime los elementos en el orden izquierda-derecha-raíz.

Operaciones privadas

    obtenerAltura(Nodo* nodo) -> int: Retorna la altura del nodo o 0 si es nullptr.

    obtenerBalance(Nodo* nodo) -> int: Calcula el balance del nodo (altura izquierda - altura derecha).

    rotarDerecha(Nodo* y) -> Nodo*: Aplica una rotación a la derecha y devuelve la nueva raíz.

    rotarIzquierda(Nodo* x) -> Nodo*: Aplica una rotación a la izquierda y devuelve la nueva raíz.

    insertar(Nodo* nodo, int clave) -> Nodo*: Inserta un nodo y balancea el árbol recursivamente.

    encontrarMinimo(Nodo* nodo) -> Nodo*: Retorna el nodo con la clave mínima en un subárbol.

    eliminar(Nodo* nodo, int clave) -> Nodo*: Elimina un nodo y balancea el árbol recursivamente.

    buscar(Nodo* nodo, int clave) -> Nodo*: Busca una clave en el árbol y devuelve el nodo si lo encuentra.

    recorridoInorden(Nodo* nodo): Recorrido inorden recursivo.

    recorridoPreorden(Nodo* nodo): Recorrido preorden recursivo.

    recorridoPostorden(Nodo* nodo): Recorrido postorden recursivo.
