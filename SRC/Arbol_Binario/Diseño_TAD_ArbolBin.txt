TAD ArbolBinarioG
Datos Mínimos:
    raiz, NodoBinario*: Apuntador al primer nodo del árbol.

Comportamiento:
    // Constructor
    ArbolBinarioG(): Crea un árbol vacío.

    // Métodos básicos
    getRaiz() -> NodoBinario*: Retorna la raíz del árbol.
    esVacio() -> bool: Retorna `true` si el árbol no tiene nodos.
    datoRaiz() -> T: Retorna el valor de la raíz, o lanza una excepción si está vacío.

    // Propiedades del árbol
    altura() -> int: Retorna la altura del árbol.
    tamano() -> int: Retorna el número total de nodos en el árbol.
    altura(subarbol: NodoBinario*) -> int: Retorna la altura de un subárbol.
    tamano(subarbol: NodoBinario*) -> int: Retorna el tamaño de un subárbol.

    // Inserción y eliminación
    insertar(valor: T): Inserta un valor siguiendo las reglas de BST.
    insertar(valor: T, subarbol: NodoBinario*, pos: char): Inserta un valor en el subárbol en `pos` (`i`=izquierda, `d`=derecha).
    eliminar(valor: T): Busca un valor en el árbol y lo elimina manteniendo las reglas del BST.

    // Búsqueda
    buscar(valor: T) -> NodoBinario*: Retorna un puntero al nodo si lo encuentra, `nullptr` si no existe.
    buscarE(valor: T) -> NodoBinario*: Retorna un puntero al nodo padre del valor buscado, `nullptr` si no tiene padre.

    // Recorridos
    preOrden(subarbol: NodoBinario*): Imprime el recorrido preorden del subárbol.
    inOrden(subarbol: NodoBinario*): Imprime el recorrido inorden del subárbol.
    posOrden(subarbol: NodoBinario*): Imprime el recorrido postorden del subárbol.
    nivelOrden(subarbol: NodoBinario*): Imprime el recorrido por niveles del subárbol.

    preOrden(): Imprime el recorrido preorden del árbol.
    inOrden(): Imprime el recorrido inorden del árbol.
    posOrden(): Imprime el recorrido postorden del árbol.
    nivelOrden(): Imprime el recorrido por niveles del árbol.

TAD NodoBinario
Datos Mínimos:
    dato, T: Almacena el valor del nodo.
    izq, NodoBinario*: Apuntador al hijo izquierdo.
    der, NodoBinario*: Apuntador al hijo derecho.

Comportamiento:
    NodoBinario(dato): Crea un nodo binario con el valor proporcionado.
    NodoBinario(): Crea un nodo binario vacío.

    // Getters y Setters
    obtenerDato() -> T
    fijarDato(val: T)
    obtenerHijoIzq() -> NodoBinario*
    obtenerHijoDer() -> NodoBinario*
    fijarHijoIzq(izq: NodoBinario*)
    fijarHijoDer(der: NodoBinario*)

